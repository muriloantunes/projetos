{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["ConnectionFactory","stores","version","dbName","connection","close","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;AAAA,IAAIA,oBAAqB,YAAW;AAClC,MAAMC,SAAS,CAAC,aAAD,CAAf;AACA,MAAMC,UAAU,CAAhB;AACA,MAAMC,SAAS,YAAf;;AAEA,MAAIC,aAAa,IAAjB;AACA,MAAIC,QAAQ,IAAZ;;AAEA;AACE,iCAAc;AAAA;;AACZ,YAAM,IAAIC,KAAJ,CAAU,sDAAV,CAAN;AACD;;AAHH;AAAA;AAAA,sCAKyB;AACrB,eAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,cAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBV,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAQ,sBAAYI,eAAZ,GAA8B,aAAK;AACjCd,8BAAkBe,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AACD,WAFD;;AAIAR,sBAAYS,SAAZ,GAAwB,aAAK;AAC3B,gBAAI,CAACf,UAAL,EAAiBA,aAAaY,EAAEC,MAAF,CAASC,MAAtB;AACjBb,oBAAQD,WAAWC,KAAX,CAAiBe,IAAjB,CAAsBhB,UAAtB,CAAR;AACAA,uBAAWC,KAAX,GAAmB,YAAW;AAC5B,oBAAM,IAAIC,KAAJ,CAAU,4CAAV,CAAN;AACD,aAFD;AAGAE,oBAAQJ,UAAR;AACD,WAPD;;AASAM,sBAAYW,OAAZ,GAAsB,aAAK;AACzBC,oBAAQC,GAAR,CAAYP,EAAEC,MAAF,CAASO,KAArB;AACAf,mBAAOO,EAAEC,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACD,WAHD;AAID,SApBM,CAAP;AAqBD;AA3BH;AAAA;AAAA,oCA6BuBrB,UA7BvB,EA6BmC;AAC/BH,eAAOyB,OAAP,CAAe,iBAAS;AACtB,cAAItB,WAAWuB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAJ,EACEzB,WAAW0B,iBAAX,CAA6BD,KAA7B;;AAEFzB,qBAAW2B,iBAAX,CAA6B9B,MAA7B,EAAqC,EAAE+B,eAAe,IAAjB,EAArC;AACD,SALD;AAMD;AApCH;AAAA;AAAA,wCAsC2B;AACvB,YAAI5B,UAAJ,EAAgB;AACdC;AACAD,uBAAa,IAAb;AACD;AACF;AA3CH;;AAAA;AAAA;AA6CD,CArDuB,EAAxB","file":"ConnectionFactory.js","sourcesContent":["var ConnectionFactory = (function() {\r\n  const stores = ['negociacoes']\r\n  const version = 4\r\n  const dbName = 'aluraframe'\r\n\r\n  var connection = null\r\n  var close = null\r\n\r\n  return class ConnectionFactory {\r\n    constructor() {\r\n      throw new Error('Não é possível criar instâncias de ConnectionFactory')\r\n    }\r\n\r\n    static getConnection() {\r\n      return new Promise((resolve, reject) => {\r\n        let openRequest = window.indexedDB.open(dbName, version)\r\n\r\n        openRequest.onupgradeneeded = e => {\r\n          ConnectionFactory._createStores(e.target.result)\r\n        }\r\n\r\n        openRequest.onsuccess = e => {\r\n          if (!connection) connection = e.target.result\r\n          close = connection.close.bind(connection)\r\n          connection.close = function() {\r\n            throw new Error('Você não pode fechar diretamente a conexão')\r\n          }\r\n          resolve(connection)\r\n        }\r\n\r\n        openRequest.onerror = e => {\r\n          console.log(e.target.error)\r\n          reject(e.target.error.name)\r\n        }\r\n      })\r\n    }\r\n\r\n    static _createStores(connection) {\r\n      stores.forEach(store => {\r\n        if (connection.objectStoreNames.contains(store))\r\n          connection.deleteObjectStore(store)\r\n\r\n        connection.createObjectStore(stores, { autoIncrement: true })\r\n      })\r\n    }\r\n\r\n    static closeConnection() {\r\n      if (connection) {\r\n        close()\r\n        connection = null\r\n      }\r\n    }\r\n  }\r\n})()\r\n"]}