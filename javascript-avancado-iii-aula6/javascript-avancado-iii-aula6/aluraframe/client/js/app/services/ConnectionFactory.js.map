{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["stores","version","dbName","connection","close","ConnectionFactory","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAQA,Y,GAAS,CAAC,aAAD,C;AACTC,a,GAAU,C;AACVC,Y,GAAS,Y;AAEXC,gB,GAAa,I;AACbC,W,GAAQ,I;;mCAECC,iB;AACX,qCAAc;AAAA;;AACZ,gBAAM,IAAIC,KAAJ,CAAU,sDAAV,CAAN;AACD;;;;0CAEsB;AACrB,mBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,kBAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBX,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAS,0BAAYI,eAAZ,GAA8B,aAAK;AACjCT,kCAAkBU,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AACD,eAFD;;AAIAR,0BAAYS,SAAZ,GAAwB,aAAK;AAC3B,oBAAI,CAAChB,UAAL,EAAiBA,aAAaa,EAAEC,MAAF,CAASC,MAAtB;AACjBd,wBAAQD,WAAWC,KAAX,CAAiBgB,IAAjB,CAAsBjB,UAAtB,CAAR;AACAA,2BAAWC,KAAX,GAAmB,YAAW;AAC5B,wBAAM,IAAIE,KAAJ,CAAU,4CAAV,CAAN;AACD,iBAFD;AAGAE,wBAAQL,UAAR;AACD,eAPD;;AASAO,0BAAYW,OAAZ,GAAsB,aAAK;AACzBC,wBAAQC,GAAR,CAAYP,EAAEC,MAAF,CAASO,KAArB;AACAf,uBAAOO,EAAEC,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACD,eAHD;AAID,aApBM,CAAP;AAqBD;;;wCAEoBtB,U,EAAY;AAC/BH,mBAAO0B,OAAP,CAAe,iBAAS;AACtB,kBAAIvB,WAAWwB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAJ,EACE1B,WAAW2B,iBAAX,CAA6BD,KAA7B;;AAEF1B,yBAAW4B,iBAAX,CAA6B/B,MAA7B,EAAqC,EAAEgC,eAAe,IAAjB,EAArC;AACD,aALD;AAMD;;;4CAEwB;AACvB,gBAAI7B,UAAJ,EAAgB;AACdC;AACAD,2BAAa,IAAb;AACD;AACF","file":"ConnectionFactory.js","sourcesContent":["  const stores = ['negociacoes']\r\n  const version = 4\r\n  const dbName = 'aluraframe'\r\n\r\n  let connection = null\r\n  let close = null\r\n\r\n  export class ConnectionFactory {\r\n    constructor() {\r\n      throw new Error('Não é possível criar instâncias de ConnectionFactory')\r\n    }\r\n\r\n    static getConnection() {\r\n      return new Promise((resolve, reject) => {\r\n        let openRequest = window.indexedDB.open(dbName, version)\r\n\r\n        openRequest.onupgradeneeded = e => {\r\n          ConnectionFactory._createStores(e.target.result)\r\n        }\r\n\r\n        openRequest.onsuccess = e => {\r\n          if (!connection) connection = e.target.result\r\n          close = connection.close.bind(connection)\r\n          connection.close = function() {\r\n            throw new Error('Você não pode fechar diretamente a conexão')\r\n          }\r\n          resolve(connection)\r\n        }\r\n\r\n        openRequest.onerror = e => {\r\n          console.log(e.target.error)\r\n          reject(e.target.error.name)\r\n        }\r\n      })\r\n    }\r\n\r\n    static _createStores(connection) {\r\n      stores.forEach(store => {\r\n        if (connection.objectStoreNames.contains(store))\r\n          connection.deleteObjectStore(store)\r\n\r\n        connection.createObjectStore(stores, { autoIncrement: true })\r\n      })\r\n    }\r\n\r\n    static closeConnection() {\r\n      if (connection) {\r\n        close()\r\n        connection = null\r\n      }\r\n    }\r\n  }\r\n\r\n"]}